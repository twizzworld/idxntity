{"ast":null,"code":"import _classCallCheck from \"/Users/rizzytwizzy/Projects/idxntity/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rizzytwizzy/Projects/idxntity/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { WebGLRenderTarget, LinearFilter, Vector2, Scene, Camera, BufferGeometry, BufferAttribute, Mesh } from 'three';\nimport { ConvolutionMaterial } from './ConvolutionMaterial.js';\nvar BlurPass = /*#__PURE__*/function () {\n  function BlurPass(_ref) {\n    var gl = _ref.gl,\n      resolution = _ref.resolution,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 500 : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 500 : _ref$height,\n      _ref$minDepthThreshol = _ref.minDepthThreshold,\n      minDepthThreshold = _ref$minDepthThreshol === void 0 ? 0 : _ref$minDepthThreshol,\n      _ref$maxDepthThreshol = _ref.maxDepthThreshold,\n      maxDepthThreshold = _ref$maxDepthThreshol === void 0 ? 1 : _ref$maxDepthThreshol,\n      _ref$depthScale = _ref.depthScale,\n      depthScale = _ref$depthScale === void 0 ? 0 : _ref$depthScale,\n      _ref$depthToBlurRatio = _ref.depthToBlurRatioBias,\n      depthToBlurRatioBias = _ref$depthToBlurRatio === void 0 ? 0.25 : _ref$depthToBlurRatio;\n    _classCallCheck(this, BlurPass);\n    this.renderToScreen = false;\n    this.renderTargetA = new WebGLRenderTarget(resolution, resolution, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      stencilBuffer: false,\n      depthBuffer: false,\n      encoding: gl.outputEncoding\n    });\n    this.renderTargetB = this.renderTargetA.clone();\n    this.convolutionMaterial = new ConvolutionMaterial();\n    this.convolutionMaterial.setTexelSize(1.0 / width, 1.0 / height);\n    this.convolutionMaterial.setResolution(new Vector2(width, height));\n    this.scene = new Scene();\n    this.camera = new Camera();\n    this.convolutionMaterial.uniforms.minDepthThreshold.value = minDepthThreshold;\n    this.convolutionMaterial.uniforms.maxDepthThreshold.value = maxDepthThreshold;\n    this.convolutionMaterial.uniforms.depthScale.value = depthScale;\n    this.convolutionMaterial.uniforms.depthToBlurRatioBias.value = depthToBlurRatioBias;\n    this.convolutionMaterial.defines.USE_DEPTH = depthScale > 0;\n    var vertices = new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]);\n    var uvs = new Float32Array([0, 0, 2, 0, 0, 2]);\n    var geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n    geometry.setAttribute('uv', new BufferAttribute(uvs, 2));\n    this.screen = new Mesh(geometry, this.convolutionMaterial);\n    this.screen.frustumCulled = false;\n    this.scene.add(this.screen);\n  }\n  _createClass(BlurPass, [{\n    key: \"render\",\n    value: function render(renderer, inputBuffer, outputBuffer) {\n      var scene = this.scene;\n      var camera = this.camera;\n      var renderTargetA = this.renderTargetA;\n      var renderTargetB = this.renderTargetB;\n      var material = this.convolutionMaterial;\n      var uniforms = material.uniforms;\n      uniforms.depthBuffer.value = inputBuffer.depthTexture;\n      var kernel = material.kernel;\n      var lastRT = inputBuffer;\n      var destRT;\n      var i, l; // Apply the multi-pass blur.\n\n      for (i = 0, l = kernel.length - 1; i < l; ++i) {\n        // Alternate between targets.\n        destRT = (i & 1) === 0 ? renderTargetA : renderTargetB;\n        uniforms.kernel.value = kernel[i];\n        uniforms.inputBuffer.value = lastRT.texture;\n        renderer.setRenderTarget(destRT);\n        renderer.render(scene, camera);\n        lastRT = destRT;\n      }\n      uniforms.kernel.value = kernel[i];\n      uniforms.inputBuffer.value = lastRT.texture;\n      renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);\n      renderer.render(scene, camera);\n    }\n  }]);\n  return BlurPass;\n}();\nexport { BlurPass };","map":{"version":3,"names":["WebGLRenderTarget","LinearFilter","Vector2","Scene","Camera","BufferGeometry","BufferAttribute","Mesh","ConvolutionMaterial","BlurPass","_ref","gl","resolution","_ref$width","width","_ref$height","height","_ref$minDepthThreshol","minDepthThreshold","_ref$maxDepthThreshol","maxDepthThreshold","_ref$depthScale","depthScale","_ref$depthToBlurRatio","depthToBlurRatioBias","_classCallCheck","renderToScreen","renderTargetA","minFilter","magFilter","stencilBuffer","depthBuffer","encoding","outputEncoding","renderTargetB","clone","convolutionMaterial","setTexelSize","setResolution","scene","camera","uniforms","value","defines","USE_DEPTH","vertices","Float32Array","uvs","geometry","setAttribute","screen","frustumCulled","add","_createClass","key","render","renderer","inputBuffer","outputBuffer","material","depthTexture","kernel","lastRT","destRT","i","l","length","texture","setRenderTarget"],"sources":["/Users/rizzytwizzy/Projects/idxntity/node_modules/@react-three/drei/materials/BlurPass.js"],"sourcesContent":["import { WebGLRenderTarget, LinearFilter, Vector2, Scene, Camera, BufferGeometry, BufferAttribute, Mesh } from 'three';\nimport { ConvolutionMaterial } from './ConvolutionMaterial.js';\n\nclass BlurPass {\n  constructor({\n    gl,\n    resolution,\n    width = 500,\n    height = 500,\n    minDepthThreshold = 0,\n    maxDepthThreshold = 1,\n    depthScale = 0,\n    depthToBlurRatioBias = 0.25\n  }) {\n    this.renderToScreen = false;\n    this.renderTargetA = new WebGLRenderTarget(resolution, resolution, {\n      minFilter: LinearFilter,\n      magFilter: LinearFilter,\n      stencilBuffer: false,\n      depthBuffer: false,\n      encoding: gl.outputEncoding\n    });\n    this.renderTargetB = this.renderTargetA.clone();\n    this.convolutionMaterial = new ConvolutionMaterial();\n    this.convolutionMaterial.setTexelSize(1.0 / width, 1.0 / height);\n    this.convolutionMaterial.setResolution(new Vector2(width, height));\n    this.scene = new Scene();\n    this.camera = new Camera();\n    this.convolutionMaterial.uniforms.minDepthThreshold.value = minDepthThreshold;\n    this.convolutionMaterial.uniforms.maxDepthThreshold.value = maxDepthThreshold;\n    this.convolutionMaterial.uniforms.depthScale.value = depthScale;\n    this.convolutionMaterial.uniforms.depthToBlurRatioBias.value = depthToBlurRatioBias;\n    this.convolutionMaterial.defines.USE_DEPTH = depthScale > 0;\n    const vertices = new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]);\n    const uvs = new Float32Array([0, 0, 2, 0, 0, 2]);\n    const geometry = new BufferGeometry();\n    geometry.setAttribute('position', new BufferAttribute(vertices, 3));\n    geometry.setAttribute('uv', new BufferAttribute(uvs, 2));\n    this.screen = new Mesh(geometry, this.convolutionMaterial);\n    this.screen.frustumCulled = false;\n    this.scene.add(this.screen);\n  }\n\n  render(renderer, inputBuffer, outputBuffer) {\n    const scene = this.scene;\n    const camera = this.camera;\n    const renderTargetA = this.renderTargetA;\n    const renderTargetB = this.renderTargetB;\n    let material = this.convolutionMaterial;\n    let uniforms = material.uniforms;\n    uniforms.depthBuffer.value = inputBuffer.depthTexture;\n    const kernel = material.kernel;\n    let lastRT = inputBuffer;\n    let destRT;\n    let i, l; // Apply the multi-pass blur.\n\n    for (i = 0, l = kernel.length - 1; i < l; ++i) {\n      // Alternate between targets.\n      destRT = (i & 1) === 0 ? renderTargetA : renderTargetB;\n      uniforms.kernel.value = kernel[i];\n      uniforms.inputBuffer.value = lastRT.texture;\n      renderer.setRenderTarget(destRT);\n      renderer.render(scene, camera);\n      lastRT = destRT;\n    }\n\n    uniforms.kernel.value = kernel[i];\n    uniforms.inputBuffer.value = lastRT.texture;\n    renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);\n    renderer.render(scene, camera);\n  }\n\n}\n\nexport { BlurPass };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}