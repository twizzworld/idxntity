{"ast":null,"code":"import _objectWithoutProperties from \"/Users/rizzytwizzy/Projects/idxntity/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"children\", \"color\", \"segments\", \"scale\", \"zoom\", \"grayscale\", \"url\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useTexture } from './useTexture.js';\nvar ImageMaterialImpl = shaderMaterial({\n  color: new THREE.Color('white'),\n  scale: [1, 1],\n  imageBounds: [1, 1],\n  map: null,\n  zoom: 1,\n  grayscale: 0\n}, /* glsl */\"\\n  varying vec2 vUv;\\n  void main() {\\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\\n    vUv = uv;\\n  }\\n\", /* glsl */\"\\n  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\\n  varying vec2 vUv;\\n  uniform vec2 scale;\\n  uniform vec2 imageBounds;\\n  uniform vec3 color;\\n  uniform sampler2D map;\\n  uniform float zoom;\\n  uniform float grayscale;\\n  const vec3 luma = vec3(.299, 0.587, 0.114);\\n  vec4 toGrayscale(vec4 color, float intensity) {\\n    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);\\n  }\\n  vec2 aspect(vec2 size) {\\n    return size / min(size.x, size.y);\\n  }\\n  void main() {\\n    vec2 s = aspect(scale);\\n    vec2 i = aspect(imageBounds);\\n    float rs = s.x / s.y;\\n    float ri = i.x / i.y;\\n    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\\n    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\\n    vec2 uv = vUv * s / new + offset;\\n    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);\\n    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, 1.0), grayscale);\\n  }\\n\");\nvar Image = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var children = _ref.children,\n    color = _ref.color,\n    _ref$segments = _ref.segments,\n    segments = _ref$segments === void 0 ? 1 : _ref$segments,\n    _ref$scale = _ref.scale,\n    scale = _ref$scale === void 0 ? 1 : _ref$scale,\n    _ref$zoom = _ref.zoom,\n    zoom = _ref$zoom === void 0 ? 1 : _ref$zoom,\n    _ref$grayscale = _ref.grayscale,\n    grayscale = _ref$grayscale === void 0 ? 0 : _ref$grayscale,\n    url = _ref.url,\n    props = _objectWithoutProperties(_ref, _excluded);\n  extend({\n    ImageMaterial: ImageMaterialImpl\n  });\n  var texture = useTexture(url);\n  var planeBounds = Array.isArray(scale) ? [scale[0], scale[1]] : [scale, scale];\n  var imageBounds = [texture.image.width, texture.image.height];\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref,\n    scale: scale\n  }, props), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: [1, 1, segments, segments]\n  }), /*#__PURE__*/React.createElement(\"imageMaterial\", {\n    color: color,\n    map: texture,\n    zoom: zoom,\n    grayscale: grayscale,\n    scale: planeBounds,\n    imageBounds: imageBounds\n  }), children);\n});\nexport { Image };","map":{"version":3,"names":["_extends","React","THREE","extend","shaderMaterial","useTexture","ImageMaterialImpl","color","Color","scale","imageBounds","map","zoom","grayscale","Image","forwardRef","_ref","ref","children","_ref$segments","segments","_ref$scale","_ref$zoom","_ref$grayscale","url","props","_objectWithoutProperties","_excluded","ImageMaterial","texture","planeBounds","Array","isArray","image","width","height","createElement","args"],"sources":["/Users/rizzytwizzy/Projects/idxntity/node_modules/@react-three/drei/core/Image.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { extend } from '@react-three/fiber';\nimport { shaderMaterial } from './shaderMaterial.js';\nimport { useTexture } from './useTexture.js';\n\nconst ImageMaterialImpl = shaderMaterial({\n  color: new THREE.Color('white'),\n  scale: [1, 1],\n  imageBounds: [1, 1],\n  map: null,\n  zoom: 1,\n  grayscale: 0\n},\n/* glsl */\n`\n  varying vec2 vUv;\n  void main() {\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n    vUv = uv;\n  }\n`,\n/* glsl */\n`\n  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\n  varying vec2 vUv;\n  uniform vec2 scale;\n  uniform vec2 imageBounds;\n  uniform vec3 color;\n  uniform sampler2D map;\n  uniform float zoom;\n  uniform float grayscale;\n  const vec3 luma = vec3(.299, 0.587, 0.114);\n  vec4 toGrayscale(vec4 color, float intensity) {\n    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);\n  }\n  vec2 aspect(vec2 size) {\n    return size / min(size.x, size.y);\n  }\n  void main() {\n    vec2 s = aspect(scale);\n    vec2 i = aspect(imageBounds);\n    float rs = s.x / s.y;\n    float ri = i.x / i.y;\n    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n    vec2 uv = vUv * s / new + offset;\n    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);\n    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, 1.0), grayscale);\n  }\n`);\nconst Image = /*#__PURE__*/React.forwardRef(({\n  children,\n  color,\n  segments = 1,\n  scale = 1,\n  zoom = 1,\n  grayscale = 0,\n  url,\n  ...props\n}, ref) => {\n  extend({\n    ImageMaterial: ImageMaterialImpl\n  });\n  const texture = useTexture(url);\n  const planeBounds = Array.isArray(scale) ? [scale[0], scale[1]] : [scale, scale];\n  const imageBounds = [texture.image.width, texture.image.height];\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref,\n    scale: scale\n  }, props), /*#__PURE__*/React.createElement(\"planeGeometry\", {\n    args: [1, 1, segments, segments]\n  }), /*#__PURE__*/React.createElement(\"imageMaterial\", {\n    color: color,\n    map: texture,\n    zoom: zoom,\n    grayscale: grayscale,\n    scale: planeBounds,\n    imageBounds: imageBounds\n  }), children);\n});\n\nexport { Image };\n"],"mappings":";;AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,cAAc,QAAQ,qBAAqB;AACpD,SAASC,UAAU,QAAQ,iBAAiB;AAE5C,IAAMC,iBAAiB,GAAGF,cAAc,CAAC;EACvCG,KAAK,EAAE,IAAIL,KAAK,CAACM,KAAK,CAAC,OAAO,CAAC;EAC/BC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACbC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACnBC,GAAG,EAAE,IAAI;EACTC,IAAI,EAAE,CAAC;EACPC,SAAS,EAAE;AACb,CAAC,EACD,+JAQA,+gCA4BC,CAAC;AACF,IAAMC,KAAK,GAAG,aAAab,KAAK,CAACc,UAAU,CAAC,UAAAC,IAAA,EASzCC,GAAG,EAAK;EAAA,IARTC,QAAQ,GAAAF,IAAA,CAARE,QAAQ;IACRX,KAAK,GAAAS,IAAA,CAALT,KAAK;IAAAY,aAAA,GAAAH,IAAA,CACLI,QAAQ;IAARA,QAAQ,GAAAD,aAAA,cAAG,CAAC,GAAAA,aAAA;IAAAE,UAAA,GAAAL,IAAA,CACZP,KAAK;IAALA,KAAK,GAAAY,UAAA,cAAG,CAAC,GAAAA,UAAA;IAAAC,SAAA,GAAAN,IAAA,CACTJ,IAAI;IAAJA,IAAI,GAAAU,SAAA,cAAG,CAAC,GAAAA,SAAA;IAAAC,cAAA,GAAAP,IAAA,CACRH,SAAS;IAATA,SAAS,GAAAU,cAAA,cAAG,CAAC,GAAAA,cAAA;IACbC,GAAG,GAAAR,IAAA,CAAHQ,GAAG;IACAC,KAAK,GAAAC,wBAAA,CAAAV,IAAA,EAAAW,SAAA;EAERxB,MAAM,CAAC;IACLyB,aAAa,EAAEtB;EACjB,CAAC,CAAC;EACF,IAAMuB,OAAO,GAAGxB,UAAU,CAACmB,GAAG,CAAC;EAC/B,IAAMM,WAAW,GAAGC,KAAK,CAACC,OAAO,CAACvB,KAAK,CAAC,GAAG,CAACA,KAAK,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAACA,KAAK,EAAEA,KAAK,CAAC;EAChF,IAAMC,WAAW,GAAG,CAACmB,OAAO,CAACI,KAAK,CAACC,KAAK,EAAEL,OAAO,CAACI,KAAK,CAACE,MAAM,CAAC;EAC/D,OAAO,aAAalC,KAAK,CAACmC,aAAa,CAAC,MAAM,EAAEpC,QAAQ,CAAC;IACvDiB,GAAG,EAAEA,GAAG;IACRR,KAAK,EAAEA;EACT,CAAC,EAAEgB,KAAK,CAAC,EAAE,aAAaxB,KAAK,CAACmC,aAAa,CAAC,eAAe,EAAE;IAC3DC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAEjB,QAAQ,EAAEA,QAAQ;EACjC,CAAC,CAAC,EAAE,aAAanB,KAAK,CAACmC,aAAa,CAAC,eAAe,EAAE;IACpD7B,KAAK,EAAEA,KAAK;IACZI,GAAG,EAAEkB,OAAO;IACZjB,IAAI,EAAEA,IAAI;IACVC,SAAS,EAAEA,SAAS;IACpBJ,KAAK,EAAEqB,WAAW;IAClBpB,WAAW,EAAEA;EACf,CAAC,CAAC,EAAEQ,QAAQ,CAAC;AACf,CAAC,CAAC;AAEF,SAASJ,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}