{"ast":null,"code":"import _objectSpread from \"/Users/rizzytwizzy/Projects/idxntity/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/rizzytwizzy/Projects/idxntity/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _defineProperty from \"/Users/rizzytwizzy/Projects/idxntity/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _inherits from \"/Users/rizzytwizzy/Projects/idxntity/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/rizzytwizzy/Projects/idxntity/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/rizzytwizzy/Projects/idxntity/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/rizzytwizzy/Projects/idxntity/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _excluded = [\"layers\"],\n  _excluded2 = [\"children\"];\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { extend } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { MathUtils, Color, Vector3, ShaderMaterial } from 'three';\nvar BlendModes = {\n  normal: 1,\n  add: 2,\n  subtract: 3,\n  multiply: 4,\n  addsub: 5,\n  lighten: 6,\n  darken: 7,\n  switch: 8,\n  divide: 9,\n  overlay: 10,\n  screen: 11,\n  softlight: 12\n};\nvar Abstract = /*#__PURE__*/function () {\n  function Abstract() {\n    _classCallCheck(this, Abstract);\n  }\n  _createClass(Abstract, [{\n    key: \"getBlendMode\",\n    value: function getBlendMode(type, a, b) {\n      if (type === BlendModes['normal']) return \"sc_copy(\".concat(a, \", \").concat(b, \")\");else if (type === BlendModes['add']) return \"sc_add(\".concat(a, \", \").concat(b, \")\");else if (type === BlendModes['subtract']) return \"sc_subtract(\".concat(a, \", \").concat(b, \")\");else if (type === BlendModes['multiply']) return \"sc_multiply(\".concat(a, \", \").concat(b, \")\");else if (type === BlendModes['addsub']) return \"sc_addSub(\".concat(a, \", \").concat(b, \")\");else if (type === BlendModes['lighten']) return \"sc_lighten(\".concat(a, \", \").concat(b, \")\");else if (type === BlendModes['darken']) return \"sc_darken(\".concat(a, \", \").concat(b, \")\");else if (type === BlendModes['divide']) return \"sc_divide(\".concat(a, \", \").concat(b, \")\");else if (type === BlendModes['overlay']) return \"sc_overlay(\".concat(a, \", \").concat(b, \")\");else if (type === BlendModes['screen']) return \"sc_screen(\".concat(a, \", \").concat(b, \")\");else if (type === BlendModes['softlight']) return \"sc_softLight(\".concat(a, \", \").concat(b, \")\");\n    }\n  }, {\n    key: \"getVertexVariables\",\n    value: function getVertexVariables() {\n      return '';\n    }\n  }, {\n    key: \"getVertexBody\",\n    value: function getVertexBody(e) {\n      return '';\n    }\n  }], [{\n    key: \"genID\",\n    value: function genID() {\n      return MathUtils.generateUUID().replaceAll('-', '_');\n    }\n  }]);\n  return Abstract;\n}();\nvar Base$1 = /*#__PURE__*/function (_Abstract) {\n  _inherits(Base$1, _Abstract);\n  var _super = _createSuper(Base$1);\n  function Base$1(props) {\n    var _this$uniforms;\n    var _this;\n    _classCallCheck(this, Base$1);\n    _this = _super.call(this);\n    _this.name = 'Base';\n    _this.mode = 'normal';\n    _this.uuid = Abstract.genID();\n    var _ref = props || {},\n      color = _ref.color,\n      alpha = _ref.alpha,\n      mode = _ref.mode;\n    _this.uniforms = (_this$uniforms = {}, _defineProperty(_this$uniforms, \"u_\".concat(_this.uuid, \"_color\"), {\n      value: new Color(color != null ? color : '#ffffff')\n    }), _defineProperty(_this$uniforms, \"u_\".concat(_this.uuid, \"_alpha\"), {\n      value: alpha != null ? alpha : 1\n    }), _this$uniforms);\n    _this.mode = BlendModes[mode || 'normal'];\n    return _this;\n  }\n  _createClass(Base$1, [{\n    key: \"getFragmentVariables\",\n    value: function getFragmentVariables() {\n      return \"    \\n    // SC: Base layer uniforms **********\\n    uniform float u_\".concat(this.uuid, \"_alpha;\\n    uniform vec3 u_\").concat(this.uuid, \"_color;\\n    // ************************************\\n\");\n    }\n  }, {\n    key: \"getFragmentBody\",\n    value: function getFragmentBody(e) {\n      return \"    \\n      // SC: Base layer frag-shader-code ***************************************************\\n      \".concat(e, \" = \").concat(this.getBlendMode(BlendModes[this.mode], e, \"vec4(u_\".concat(this.uuid, \"_color, u_\").concat(this.uuid, \"_alpha)\")), \";\\n      // *************************************************************************************\\n  \");\n    }\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_color\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_color\")].value = new Color(v);\n    }\n  }, {\n    key: \"alpha\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_alpha\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_alpha\")].value = v;\n    }\n  }]);\n  return Base$1;\n}(Abstract);\nvar Depth$1 = /*#__PURE__*/function (_Abstract2) {\n  _inherits(Depth$1, _Abstract2);\n  var _super2 = _createSuper(Depth$1);\n  function Depth$1(props) {\n    var _this2$uniforms;\n    var _this2;\n    _classCallCheck(this, Depth$1);\n    _this2 = _super2.call(this);\n    _this2.name = 'Depth';\n    _this2.mode = 'normal';\n    _this2.uuid = Abstract.genID();\n    var _ref2 = props || {},\n      alpha = _ref2.alpha,\n      mode = _ref2.mode,\n      colorA = _ref2.colorA,\n      colorB = _ref2.colorB,\n      near = _ref2.near,\n      far = _ref2.far,\n      origin = _ref2.origin,\n      isVector = _ref2.isVector;\n    _this2.uniforms = (_this2$uniforms = {}, _defineProperty(_this2$uniforms, \"u_\".concat(_this2.uuid, \"_alpha\"), {\n      value: alpha != null ? alpha : 1\n    }), _defineProperty(_this2$uniforms, \"u_\".concat(_this2.uuid, \"_near\"), {\n      value: near != null ? near : 700\n    }), _defineProperty(_this2$uniforms, \"u_\".concat(_this2.uuid, \"_far\"), {\n      value: far != null ? far : 1e7\n    }), _defineProperty(_this2$uniforms, \"u_\".concat(_this2.uuid, \"_origin\"), {\n      value: origin != null ? origin : new Vector3(0, 0, 0)\n    }), _defineProperty(_this2$uniforms, \"u_\".concat(_this2.uuid, \"_colorA\"), {\n      value: new Color(colorA != null ? colorA : '#ffffff')\n    }), _defineProperty(_this2$uniforms, \"u_\".concat(_this2.uuid, \"_colorB\"), {\n      value: new Color(colorB != null ? colorB : '#ffffff')\n    }), _defineProperty(_this2$uniforms, \"u_\".concat(_this2.uuid, \"_isVector\"), {\n      value: isVector != null ? isVector : true\n    }), _this2$uniforms);\n    _this2.mode = BlendModes[mode || 'normal'];\n    return _this2;\n  }\n  _createClass(Depth$1, [{\n    key: \"getVertexVariables\",\n    value: function getVertexVariables() {\n      return (/* glsl */\"\\n    varying vec3 v_\".concat(this.uuid, \"_worldPosition;\\n    \")\n      );\n    }\n  }, {\n    key: \"getVertexBody\",\n    value: function getVertexBody(e) {\n      return (/* glsl */\"\\n    v_\".concat(this.uuid, \"_worldPosition = vec3(vec4(position, 1.0) * modelMatrix);\\n    \")\n      );\n    }\n  }, {\n    key: \"getFragmentVariables\",\n    value: function getFragmentVariables() {\n      return (/* glsl */\"    \\n    // SC: Fresnel layer variables **********\\n    uniform float u_\".concat(this.uuid, \"_alpha;\\n    uniform float u_\").concat(this.uuid, \"_near;\\n    uniform float u_\").concat(this.uuid, \"_far;\\n    uniform float u_\").concat(this.uuid, \"_isVector;\\n    uniform vec3 u_\").concat(this.uuid, \"_origin;\\n    uniform vec3 u_\").concat(this.uuid, \"_colorA;\\n    uniform vec3 u_\").concat(this.uuid, \"_colorB;\\n\\n    varying vec3 v_\").concat(this.uuid, \"_worldPosition;\\n    // ************************************\\n\")\n      );\n    }\n  }, {\n    key: \"getFragmentBody\",\n    value: function getFragmentBody(e) {\n      return (/* glsl */\"    \\n      // SC: Depth layer frag-shader-code ***************************************************\\n     \\n      vec3 f_\".concat(this.uuid, \"_base = ( u_\").concat(this.uuid, \"_isVector > 0.5 ) ?  u_\").concat(this.uuid, \"_origin : cameraPosition;\\n      float f_\").concat(this.uuid, \"_dist = length( v_\").concat(this.uuid, \"_worldPosition.xyz - f_\").concat(this.uuid, \"_base );\\n      float f_\").concat(this.uuid, \"_dep = ( f_\").concat(this.uuid, \"_dist - u_\").concat(this.uuid, \"_near ) / ( u_\").concat(this.uuid, \"_far - u_\").concat(this.uuid, \"_near );\\n\\n      vec3 f_\").concat(this.uuid, \"_depth =  mix( u_\").concat(this.uuid, \"_colorB, u_\").concat(this.uuid, \"_colorA, 1.0 - clamp( f_\").concat(this.uuid, \"_dep, 0., 1. ) );\\n\\n      \").concat(e, \" = \").concat(this.getBlendMode(BlendModes[this.mode], e, \"vec4(f_\".concat(this.uuid, \"_depth, u_\").concat(this.uuid, \"_alpha)\")), \";\\n      // *************************************************************************************\\n  \")\n      );\n    }\n  }, {\n    key: \"alpha\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_alpha\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_alpha\")].value = v;\n    }\n  }, {\n    key: \"near\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_near\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_near\")].value = v;\n    }\n  }, {\n    key: \"far\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_far\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_far\")].value = v;\n    }\n  }, {\n    key: \"origin\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_origin\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_origin\")].value = v;\n    }\n  }, {\n    key: \"colorA\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_colorA\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_colorA\")].value = new Color(v);\n    }\n  }, {\n    key: \"colorB\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_colorB\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_colorB\")].value = new Color(v);\n    }\n  }, {\n    key: \"isVector\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_isVector\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_isVector\")].value = v;\n    }\n  }]);\n  return Depth$1;\n}(Abstract);\nvar Fresnel$1 = /*#__PURE__*/function (_Abstract3) {\n  _inherits(Fresnel$1, _Abstract3);\n  var _super3 = _createSuper(Fresnel$1);\n  function Fresnel$1(props) {\n    var _this3$uniforms;\n    var _this3;\n    _classCallCheck(this, Fresnel$1);\n    _this3 = _super3.call(this);\n    _this3.name = 'Fresnel';\n    _this3.mode = 'normal';\n    _this3.uuid = Abstract.genID();\n    var _ref3 = props || {},\n      alpha = _ref3.alpha,\n      mode = _ref3.mode,\n      color = _ref3.color,\n      bias = _ref3.bias,\n      intensity = _ref3.intensity,\n      power = _ref3.power;\n    _this3.uniforms = (_this3$uniforms = {}, _defineProperty(_this3$uniforms, \"u_\".concat(_this3.uuid, \"_alpha\"), {\n      value: alpha != null ? alpha : 1\n    }), _defineProperty(_this3$uniforms, \"u_\".concat(_this3.uuid, \"_color\"), {\n      value: new Color(color != null ? color : '#ffffff')\n    }), _defineProperty(_this3$uniforms, \"u_\".concat(_this3.uuid, \"_bias\"), {\n      value: bias != null ? bias : 0\n    }), _defineProperty(_this3$uniforms, \"u_\".concat(_this3.uuid, \"_intensity\"), {\n      value: intensity != null ? intensity : 1\n    }), _defineProperty(_this3$uniforms, \"u_\".concat(_this3.uuid, \"_power\"), {\n      value: power != null ? power : 2\n    }), _this3$uniforms);\n    _this3.mode = BlendModes[mode || 'normal'];\n    return _this3;\n  }\n  _createClass(Fresnel$1, [{\n    key: \"getVertexVariables\",\n    value: function getVertexVariables() {\n      return (/* glsl */\"\\n    varying vec3 v_\".concat(this.uuid, \"_worldPosition;\\n    varying vec3 v_\").concat(this.uuid, \"_worldNormal;\\n    \")\n      );\n    }\n  }, {\n    key: \"getVertexBody\",\n    value: function getVertexBody(e) {\n      return (/* glsl */\"\\n    v_\".concat(this.uuid, \"_worldPosition = normalize(vec3(modelViewMatrix * vec4(position, 1.0)).xyz);\\n    v_\").concat(this.uuid, \"_worldNormal = normalize(normalMatrix * normal);\\n    \")\n      );\n    }\n  }, {\n    key: \"getFragmentVariables\",\n    value: function getFragmentVariables() {\n      return (/* glsl */\"    \\n    // SC: Fresnel layer variables **********\\n    uniform float u_\".concat(this.uuid, \"_alpha;\\n    uniform vec3 u_\").concat(this.uuid, \"_color;\\n    uniform float u_\").concat(this.uuid, \"_bias;\\n    uniform float u_\").concat(this.uuid, \"_intensity;\\n    uniform float u_\").concat(this.uuid, \"_power;\\n    uniform float u_\").concat(this.uuid, \"_factor;\\n\\n    varying vec3 v_\").concat(this.uuid, \"_worldPosition;\\n    varying vec3 v_\").concat(this.uuid, \"_worldNormal;\\n    // ************************************\\n\")\n      );\n    }\n  }, {\n    key: \"getFragmentBody\",\n    value: function getFragmentBody(e) {\n      return (/* glsl */\"    \\n      // SC: Fresnel layer frag-shader-code ***************************************************\\n      float f_\".concat(this.uuid, \"_a = ( 1.0 - -min(dot(v_\").concat(this.uuid, \"_worldPosition, normalize(v_\").concat(this.uuid, \"_worldNormal) ), 0.0) );\\n      float f_\").concat(this.uuid, \"_fresnel = u_\").concat(this.uuid, \"_bias + (u_\").concat(this.uuid, \"_intensity * pow(f_\").concat(this.uuid, \"_a, u_\").concat(this.uuid, \"_power));\\n\\n      \").concat(e, \" = \").concat(this.getBlendMode(BlendModes[this.mode], e, \"vec4(u_\".concat(this.uuid, \"_color * f_\").concat(this.uuid, \"_fresnel, u_\").concat(this.uuid, \"_alpha)\")), \";\\n      // *************************************************************************************\\n  \")\n      );\n    }\n  }, {\n    key: \"alpha\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_alpha\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_alpha\")].value = v;\n    }\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_color\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_color\")].value = new Color(v);\n    }\n  }, {\n    key: \"bias\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_bias\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_bias\")].value = v;\n    }\n  }, {\n    key: \"intensity\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_intensity\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_intensity\")].value = v;\n    }\n  }, {\n    key: \"power\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_power\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_power\")].value = v;\n    }\n  }]);\n  return Fresnel$1;\n}(Abstract);\nvar Noise$3 = /*#__PURE__*/function (_Abstract4) {\n  _inherits(Noise$3, _Abstract4);\n  var _super4 = _createSuper(Noise$3);\n  function Noise$3(props) {\n    var _this4$uniforms;\n    var _this4;\n    _classCallCheck(this, Noise$3);\n    _this4 = _super4.call(this);\n    _this4.name = 'Noise';\n    _this4.mode = 'normal';\n    _this4.uuid = Abstract.genID();\n    var _ref4 = props || {},\n      alpha = _ref4.alpha,\n      mode = _ref4.mode,\n      scale = _ref4.scale,\n      color = _ref4.color;\n    _this4.uniforms = (_this4$uniforms = {}, _defineProperty(_this4$uniforms, \"u_\".concat(_this4.uuid, \"_alpha\"), {\n      value: alpha != null ? alpha : 1\n    }), _defineProperty(_this4$uniforms, \"u_\".concat(_this4.uuid, \"_scale\"), {\n      value: scale != null ? scale : 1\n    }), _defineProperty(_this4$uniforms, \"u_\".concat(_this4.uuid, \"_color\"), {\n      value: new Color(color != null ? color : '#ffffff')\n    }), _this4$uniforms);\n    _this4.mode = BlendModes[mode || 'normal'];\n    return _this4;\n  }\n  _createClass(Noise$3, [{\n    key: \"getVertexVariables\",\n    value: function getVertexVariables() {\n      return (/* glsl */\"\\n    varying vec2 v_\".concat(this.uuid, \"_uv;\\n    \")\n      );\n    }\n  }, {\n    key: \"getVertexBody\",\n    value: function getVertexBody(e) {\n      return (/* glsl */\"\\n    v_\".concat(this.uuid, \"_uv = uv;\\n    \")\n      );\n    }\n  }, {\n    key: \"getFragmentVariables\",\n    value: function getFragmentVariables() {\n      return (/* glsl */\"    \\n    // SC: Fresnel layer variables **********\\n    uniform float u_\".concat(this.uuid, \"_alpha;\\n    uniform vec3 u_\").concat(this.uuid, \"_color;\\n    uniform float u_\").concat(this.uuid, \"_scale;\\n\\n    varying vec2 v_\").concat(this.uuid, \"_uv;\\n    // ************************************\\n\")\n      );\n    }\n  }, {\n    key: \"getFragmentBody\",\n    value: function getFragmentBody(e) {\n      return (/* glsl */\"    \\n      // SC: Fresnel layer frag-shader-code ***************************************************\\n      float f_\".concat(this.uuid, \"_noise = sc_rand(v_\").concat(this.uuid, \"_uv * u_\").concat(this.uuid, \"_scale);\\n\\n      \").concat(e, \" = \").concat(this.getBlendMode(BlendModes[this.mode], e, \"vec4(u_\".concat(this.uuid, \"_color * f_\").concat(this.uuid, \"_noise, u_\").concat(this.uuid, \"_alpha)\")), \";\\n      // *************************************************************************************\\n  \")\n      );\n    }\n  }, {\n    key: \"alpha\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_alpha\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_alpha\")].value = v;\n    }\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_color\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_color\")].value = new Color(v);\n    }\n  }, {\n    key: \"scale\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_scale\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_scale\")].value = v;\n    }\n  }]);\n  return Noise$3;\n}(Abstract);\nvar Noise$2 = /*#__PURE__*/function (_Abstract5) {\n  _inherits(Noise$2, _Abstract5);\n  var _super5 = _createSuper(Noise$2);\n  function Noise$2(props) {\n    var _this5$uniforms;\n    var _this5;\n    _classCallCheck(this, Noise$2);\n    _this5 = _super5.call(this);\n    _this5.name = 'Normals';\n    _this5.mode = 'normal';\n    _this5.uuid = Abstract.genID();\n    var _ref5 = props || {},\n      alpha = _ref5.alpha,\n      mode = _ref5.mode,\n      direction = _ref5.direction;\n    _this5.uniforms = (_this5$uniforms = {}, _defineProperty(_this5$uniforms, \"u_\".concat(_this5.uuid, \"_alpha\"), {\n      value: alpha != null ? alpha : 1\n    }), _defineProperty(_this5$uniforms, \"u_\".concat(_this5.uuid, \"_direction\"), {\n      value: direction\n    }), _this5$uniforms);\n    _this5.mode = BlendModes[mode || 'normal'];\n    return _this5;\n  }\n  _createClass(Noise$2, [{\n    key: \"getVertexVariables\",\n    value: function getVertexVariables() {\n      return (/* glsl */\"\\n    varying vec3 v_\".concat(this.uuid, \"_normals;\\n    \")\n      );\n    }\n  }, {\n    key: \"getVertexBody\",\n    value: function getVertexBody(e) {\n      return (/* glsl */\"\\n    v_\".concat(this.uuid, \"_normals = normal;\\n    \")\n      );\n    }\n  }, {\n    key: \"getFragmentVariables\",\n    value: function getFragmentVariables() {\n      return (/* glsl */\"    \\n    // SC: Fresnel layer variables **********\\n    uniform float u_\".concat(this.uuid, \"_alpha;\\n    uniform vec3 u_\").concat(this.uuid, \"_color;\\n    uniform vec3 u_\").concat(this.uuid, \"_direction;\\n\\n    varying vec3 v_\").concat(this.uuid, \"_normals;\\n    // ************************************\\n\")\n      );\n    }\n  }, {\n    key: \"getFragmentBody\",\n    value: function getFragmentBody(e) {\n      return (/* glsl */\"    \\n      // SC: Fresnel layer frag-shader-code ***************************************************\\n      vec3 f_\".concat(this.uuid, \"_normalColor = vec3(1.);\\n      f_\").concat(this.uuid, \"_normalColor.x = v_\").concat(this.uuid, \"_normals.x * u_\").concat(this.uuid, \"_direction.x;\\n      f_\").concat(this.uuid, \"_normalColor.y = v_\").concat(this.uuid, \"_normals.y * u_\").concat(this.uuid, \"_direction.y;\\n      f_\").concat(this.uuid, \"_normalColor.z = v_\").concat(this.uuid, \"_normals.z * u_\").concat(this.uuid, \"_direction.z;\\n\\n      \").concat(e, \" = \").concat(this.getBlendMode(BlendModes[this.mode], e, \"vec4(f_\".concat(this.uuid, \"_normalColor, u_\").concat(this.uuid, \"_alpha)\")), \";\\n      // *************************************************************************************\\n  \")\n      );\n    }\n  }, {\n    key: \"alpha\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_alpha\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_alpha\")].value = v;\n    }\n  }, {\n    key: \"color\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_color\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_color\")].value = new Color(v);\n    }\n  }, {\n    key: \"direction\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_direction\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_direction\")].value = v;\n    }\n  }]);\n  return Noise$2;\n}(Abstract);\nvar Noise$1 = /*#__PURE__*/function (_Abstract6) {\n  _inherits(Noise$1, _Abstract6);\n  var _super6 = _createSuper(Noise$1);\n  function Noise$1(props) {\n    var _this6$uniforms;\n    var _this6;\n    _classCallCheck(this, Noise$1);\n    _this6 = _super6.call(this);\n    _this6.name = 'Texture';\n    _this6.mode = 'texture';\n    _this6.uuid = Abstract.genID();\n    var _ref6 = props || {},\n      alpha = _ref6.alpha,\n      mode = _ref6.mode,\n      map = _ref6.map;\n    _this6.uniforms = (_this6$uniforms = {}, _defineProperty(_this6$uniforms, \"u_\".concat(_this6.uuid, \"_alpha\"), {\n      value: alpha != null ? alpha : 1\n    }), _defineProperty(_this6$uniforms, \"u_\".concat(_this6.uuid, \"_map\"), {\n      value: map\n    }), _this6$uniforms);\n    _this6.mode = BlendModes[mode || 'normal'];\n    return _this6;\n  }\n  _createClass(Noise$1, [{\n    key: \"getVertexVariables\",\n    value: function getVertexVariables() {\n      return (/* glsl */\"\\n    varying vec2 v_\".concat(this.uuid, \"_uv;\\n    \")\n      );\n    }\n  }, {\n    key: \"getVertexBody\",\n    value: function getVertexBody(e) {\n      return (/* glsl */\"\\n    v_\".concat(this.uuid, \"_uv = uv;\\n    \")\n      );\n    }\n  }, {\n    key: \"getFragmentVariables\",\n    value: function getFragmentVariables() {\n      return (/* glsl */\"    \\n    // SC: Fresnel layer variables **********\\n    uniform float u_\".concat(this.uuid, \"_alpha;\\n    uniform sampler2D u_\").concat(this.uuid, \"_map;\\n\\n    varying vec2 v_\").concat(this.uuid, \"_uv;\\n    // ************************************\\n\")\n      );\n    }\n  }, {\n    key: \"getFragmentBody\",\n    value: function getFragmentBody(e) {\n      return (/* glsl */\"    \\n      // SC: Fresnel layer frag-shader-code ***************************************************\\n      vec4 f_\".concat(this.uuid, \"_texture = texture2D(u_\").concat(this.uuid, \"_map, v_\").concat(this.uuid, \"_uv);\\n\\n      \").concat(e, \" = \").concat(this.getBlendMode(BlendModes[this.mode], e, \"vec4(f_\".concat(this.uuid, \"_texture.xyz, f_\").concat(this.uuid, \"_texture.a * u_\").concat(this.uuid, \"_alpha)\")), \";\\n      // *************************************************************************************\\n  \")\n      );\n    }\n  }, {\n    key: \"alpha\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_alpha\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_alpha\")].value = v;\n    }\n  }, {\n    key: \"map\",\n    get: function get() {\n      return this.uniforms[\"u_\".concat(this.uuid, \"_map\")].value;\n    },\n    set: function set(v) {\n      this.uniforms[\"u_\".concat(this.uuid, \"_map\")].value = v;\n    }\n  }]);\n  return Noise$1;\n}(Abstract);\nvar HelperChunk = /* glsl */\"\\n/**\\n * Converts a number from one range to another.\\n *\\n * @name sc_map\\n * @function\\n * @param {} value      Value to map\\n * @param {float} min1  Minimum for current range\\n * @param {float} max1  Maximum for current range\\n * @param {float} min2  Minimum for wanted range\\n * @param {float} max2  Maximum for wanted range\\n * @return {float} Mapped Value\\n *\\n * @example\\n * float n = sc_map(-0.2, -1.0, 1.0, 0.0, 1.0);\\n * // n = 0.4\\n */\\nfloat sc_map(float value, float min1, float max1, float min2, float max2) {\\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\\n}\\n\";\nvar BlendModesChunk = /* glsl */\"\\n// SC: Blend modes definitions **********\\n\\nfloat sc_softLight(float f, float b) {\\n  return (f < 0.5)\\n             ? b - (1.0 - 2.0 * f) * b * (1.0 - b)\\n             : (b < 0.25)\\n                   ? b + (2.0 * f - 1.0) * b * ((16.0 * b - 12.0) * b + 3.0)\\n                   : b + (2.0 * f - 1.0) * (sqrt(b) - b);\\n}\\n\\nvec4 sc_softLight(vec4 b, vec4 f) {\\n  vec4 result;\\n  result.x = sc_softLight(f.x, b.x);\\n  result.y = sc_softLight(f.y, b.y);\\n  result.z = sc_softLight(f.z, b.z);\\n  result.a = sc_softLight(f.a, b.a);\\n  \\n  return result;\\n}\\n\\nvec4 sc_screen(vec4 f, vec4 b) {\\n  vec4 result;\\n\\n  result = 1.0 - (1.0 - f) * (1.0 - b);\\n  result = mix(f, result, b.a);\\n\\n  return result;\\n}\\n\\nfloat sc_overlay(float f, float b) {\\n  return (b < 0.5) ? 2.0 * f * b : 1.0 - 2.0 * (1.0 - f) * (1.0 - b);\\n}\\n\\nvec4 sc_overlay(vec4 b, vec4 f) {\\n  vec4 result;\\n  result.x = sc_overlay(f.x, b.x);\\n  result.y = sc_overlay(f.y, b.y);\\n  result.z = sc_overlay(f.z, b.z);\\n  result.a = sc_overlay(f.a, b.a);\\n\\n\\n  return result;\\n}\\n\\nvec4 sc_divide(vec4 f, vec4 b) {\\n  vec4 result = vec4(0.0);\\n  result = b / f;\\n  return result;\\n}\\n\\nvec4 sc_switch(vec4 f, vec4 b, float o) {\\n  vec4 result = vec4(0.0);\\n  result = max((f * o), (b * (1.0 - o)));\\n  return result;\\n}\\n\\nvec4 sc_darken(vec4 f, vec4 b) {\\n  vec4 result = vec4(0.0);\\n  result = mix(f, min(f, b), b.a);\\n  return result;\\n}\\n\\nvec4 sc_lighten(vec4 f, vec4 b) {\\n  vec4 result = vec4(0.0);\\n  result = mix(f, max(f, b), b.a);\\n  return result;\\n}\\n\\nfloat sc_addSub(float f, float b) {\\n  return f > 0.5 ? f + b : b - f;\\n}\\nvec4 sc_addSub(vec4 f, vec4 b) {\\n  vec4 result = vec4(0.0);\\n\\n  result.r = sc_addSub(f.r, b.r * b.a);\\n  result.g = sc_addSub(f.g, b.g * b.a);\\n  result.b = sc_addSub(f.b, b.b* b.a ) ;\\n  result.a = sc_addSub(f.a, b.a);\\n\\n  return result;\\n}\\n\\nvec4 sc_multiply(vec4 f, vec4 b) {\\n  vec4 result = vec4(0.0);\\n\\n  result = mix(f, b * f, b.a);\\n  result.a = f.a + b.a * (1.0 - f.a);\\n\\n  return result;\\n}\\n\\nvec4 sc_subtract(vec4 f, vec4 b) {\\n  vec4 result = vec4(0.0);\\n\\n  result = f - b * b.a;\\n  result.a = f.a + b.a * (1.0 - f.a);\\n\\n  return result;\\n}\\n\\nvec4 sc_add(vec4 f, vec4 b) {\\n  vec4 result = vec4(0.0);\\n\\n  result = f + b * (b.a);\\n  result.a = f.a + b.a * (1.0 - f.a);\\n\\n  return result;\\n}\\n\\nvec4 sc_copy(vec4 b, vec4 f) {\\n  vec4 result = vec4(0.0);\\n\\n  result.a = f.a + b.a * (1.0 - f.a);\\n  result.rgb = ((f.rgb * f.a) + (b.rgb * b.a) * (1.0 - f.a));\\n\\n  return result;\\n}\\n\\n\"; // ************************************\n\nvar RandChunk = /* glsl */\"\\n\\n/**\\n * Normalized a value from the range [-1, 1] to the range [0,1].\\n *\\n * @name sc_normalize\\n * @function\\n * @param {float} v Value to normalize\\n * @return {float} Normalized Value\\n *\\n * @example\\n * float n = sc_normalize(-0.2);\\n * // n = 0.4\\n */\\nfloat sc_normalize(float v) { return sc_map(v, -1.0, 1.0, 0.0, 1.0); }\\n\\n/**\\n * Generates a random 2D Vector.\\n *\\n * @name sc_rand2\\n * @function\\n * @param {vec2} p Vector to hash to generate the random numbers from.\\n * @return {vec2} Random vector.\\n *\\n * @example\\n * vec2 n = sc_rand2(vec2(1.0, -4.2));\\n */\\nvec2 sc_rand2(vec2 p) {\\n  return fract(\\n      sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)))) *\\n      43758.5453);\\n}\\n\\n/**\\n * Generates a random 3D Vector.\\n *\\n * @name sc_rand3\\n * @function\\n * @param {vec3} p Vector to hash to generate the random numbers from.\\n * @return {vec3} Random vector.\\n *\\n * @example\\n * vec3 n = sc_rand3(vec3(1.0, -4.2, 0.2));\\n */\\nvec3 sc_rand3(vec3 p) { return mod(((p * 34.0) + 1.0) * p, 289.0); }\\n\\n/**\\n * Generates a random 4D Vector.\\n *\\n * @name sc_rand4\\n * @function\\n * @param {vec4} p Vector to hash to generate the random numbers from.\\n * @return {vec4} Random vector.\\n *\\n * @example\\n * vec4 n = sc_rand4(vec4(1.0, -4.2, 0.2, 2.2));\\n */\\nvec4 sc_rand4(vec4 p) { return mod(((p * 34.0) + 1.0) * p, 289.0); }\\n\\n/**\\n * Generates a random number.\\n *\\n * @name sc_rand\\n * @function\\n * @param {float} n Value to hash to generate the number from.\\n * @return {float} Random number.\\n *\\n * @example\\n * float n = sc_rand(2.5);\\n */\\nfloat sc_rand(float n) { return fract(sin(n) * 1e4); }\\n\\n/**\\n * Generates a random number.\\n *\\n * @name sc_rand\\n * @function\\n * @param {vec2} p Value to hash to generate the number from.\\n * @return {float} Random number.\\n *\\n * @example\\n * float n = sc_rand(vec2(2.5, -1.8));\\n */\\nfloat sc_rand(vec2 p) {\\n  return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) *\\n               (0.1 + abs(sin(p.y * 13.0 + p.x))));\\n}\\n\";\nvar LayerMaterial$1 = /*#__PURE__*/function (_ShaderMaterial) {\n  _inherits(LayerMaterial$1, _ShaderMaterial);\n  var _super7 = _createSuper(LayerMaterial$1);\n  function LayerMaterial$1(props) {\n    var _this7;\n    _classCallCheck(this, LayerMaterial$1);\n    _this7 = _super7.call(this, LayerMaterial$1.constructShader(props));\n    _this7.uniformsNeedUpdate = true;\n    _this7.needsUpdate = true;\n    return _this7;\n  }\n  _createClass(LayerMaterial$1, null, [{\n    key: \"constructShader\",\n    value: function constructShader() {\n      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        layers = _ref7.layers,\n        props = _objectWithoutProperties(_ref7, _excluded);\n      var uniforms = {};\n      var variables = {\n        vert: '',\n        frag: ''\n      };\n      var body = {\n        vert: '',\n        frag: ''\n      };\n      layers == null ? void 0 : layers.forEach(function (layer) {\n        variables.frag += layer.getFragmentVariables() + ' \\n';\n        variables.vert += layer.getVertexVariables() + ' \\n';\n        Object.keys(layer.uniforms).forEach(function (key) {\n          return uniforms[key] = layer.uniforms[key];\n        });\n        body.frag += layer.getFragmentBody('sc_finalColor') + ' \\n';\n        body.vert += layer.getVertexBody('') + ' \\n';\n      });\n      return _objectSpread({\n        uniforms: uniforms,\n        vertexShader: \"\\n    \".concat(variables.vert, \"\\n    void main() {\\n      \").concat(body.vert, \"\\n      vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\\n      gl_Position = projectionMatrix * modelViewPosition;\\n    }\\n    \"),\n        fragmentShader: \"\\n    \".concat(HelperChunk, \"\\n    \").concat(RandChunk, \"\\n    \").concat(BlendModesChunk, \"\\n    \").concat(variables.frag, \"\\n    void main() {\\n      vec4 sc_finalColor = vec4(vec3(1.), 1.);\\n      \").concat(body.frag, \"\\n      gl_FragColor = sc_finalColor;\\n      #include <tonemapping_fragment>\\n      #include <encodings_fragment>\\n      #include <fog_fragment>\\n      #include <premultiplied_alpha_fragment>\\n      #include <dithering_fragment>\\n    }\\n    \")\n      }, props);\n    }\n  }]);\n  return LayerMaterial$1;\n}(ShaderMaterial);\nextend({\n  LayerMaterial: LayerMaterial$1,\n  Base_: Base$1,\n  Depth_: Depth$1,\n  Fresnel_: Fresnel$1,\n  Noise_: Noise$3,\n  Normals_: Noise$2,\n  Texture_: Noise$1\n});\nvar LayerMaterial = /*#__PURE__*/React.forwardRef(function (_ref8, forwardRef) {\n  var children = _ref8.children,\n    props = _objectWithoutProperties(_ref8, _excluded2);\n  var ref = React.useRef(null);\n  React.useLayoutEffect(function () {\n    Object.assign(ref.current, LayerMaterial$1.constructShader({\n      layers: ref.current.__r3f.objects\n    }));\n    ref.current.uniformsNeedUpdate = true;\n    ref.current.needsUpdate = true;\n  }, [children]);\n  return /*#__PURE__*/React.createElement(\"layerMaterial\", _extends({\n    ref: mergeRefs([ref, forwardRef])\n  }, props), children);\n});\nvar Base = /*#__PURE__*/React.forwardRef(function (props, forwardRef) {\n  return /*#__PURE__*/React.createElement(\"base_\", _extends({\n    ref: forwardRef\n  }, props));\n});\nvar Depth = /*#__PURE__*/React.forwardRef(function (props, forwardRef) {\n  return /*#__PURE__*/React.createElement(\"depth_\", _extends({\n    ref: forwardRef\n  }, props));\n});\nvar Fresnel = /*#__PURE__*/React.forwardRef(function (props, forwardRef) {\n  return /*#__PURE__*/React.createElement(\"fresnel_\", _extends({\n    ref: forwardRef\n  }, props));\n});\nvar Noise = /*#__PURE__*/React.forwardRef(function (props, forwardRef) {\n  return /*#__PURE__*/React.createElement(\"noise_\", _extends({\n    ref: forwardRef\n  }, props));\n});\nvar Normals = /*#__PURE__*/React.forwardRef(function (props, forwardRef) {\n  return /*#__PURE__*/React.createElement(\"normals_\", _extends({\n    ref: forwardRef\n  }, props));\n});\nvar Texture = /*#__PURE__*/React.forwardRef(function (props, forwardRef) {\n  return /*#__PURE__*/React.createElement(\"texture_\", _extends({\n    ref: forwardRef\n  }, props));\n});\nexport { Base, Depth, Fresnel, LayerMaterial, Noise, Normals, Texture };","map":{"version":3,"names":["_extends","React","extend","mergeRefs","MathUtils","Color","Vector3","ShaderMaterial","BlendModes","normal","add","subtract","multiply","addsub","lighten","darken","switch","divide","overlay","screen","softlight","Abstract","_classCallCheck","_createClass","key","value","getBlendMode","type","a","b","concat","getVertexVariables","getVertexBody","e","genID","generateUUID","replaceAll","Base$1","_Abstract","_inherits","_super","_createSuper","props","_this$uniforms","_this","call","name","mode","uuid","_ref","color","alpha","uniforms","_defineProperty","getFragmentVariables","getFragmentBody","get","set","v","Depth$1","_Abstract2","_super2","_this2$uniforms","_this2","_ref2","colorA","colorB","near","far","origin","isVector","Fresnel$1","_Abstract3","_super3","_this3$uniforms","_this3","_ref3","bias","intensity","power","Noise$3","_Abstract4","_super4","_this4$uniforms","_this4","_ref4","scale","Noise$2","_Abstract5","_super5","_this5$uniforms","_this5","_ref5","direction","Noise$1","_Abstract6","_super6","_this6$uniforms","_this6","_ref6","map","HelperChunk","BlendModesChunk","RandChunk","LayerMaterial$1","_ShaderMaterial","_super7","_this7","constructShader","uniformsNeedUpdate","needsUpdate","_ref7","arguments","length","undefined","layers","_objectWithoutProperties","_excluded","variables","vert","frag","body","forEach","layer","Object","keys","_objectSpread","vertexShader","fragmentShader","LayerMaterial","Base_","Depth_","Fresnel_","Noise_","Normals_","Texture_","forwardRef","_ref8","children","_excluded2","ref","useRef","useLayoutEffect","assign","current","__r3f","objects","createElement","Base","Depth","Fresnel","Noise","Normals","Texture"],"sources":["/Users/rizzytwizzy/Projects/idxntity/node_modules/lamina/dist/index.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { extend } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\nimport { MathUtils, Color, Vector3, ShaderMaterial } from 'three';\n\nconst BlendModes = {\n  normal: 1,\n  add: 2,\n  subtract: 3,\n  multiply: 4,\n  addsub: 5,\n  lighten: 6,\n  darken: 7,\n  switch: 8,\n  divide: 9,\n  overlay: 10,\n  screen: 11,\n  softlight: 12\n};\n\nclass Abstract {\n  static genID() {\n    return MathUtils.generateUUID().replaceAll('-', '_');\n  }\n\n  getBlendMode(type, a, b) {\n    if (type === BlendModes['normal']) return `sc_copy(${a}, ${b})`;else if (type === BlendModes['add']) return `sc_add(${a}, ${b})`;else if (type === BlendModes['subtract']) return `sc_subtract(${a}, ${b})`;else if (type === BlendModes['multiply']) return `sc_multiply(${a}, ${b})`;else if (type === BlendModes['addsub']) return `sc_addSub(${a}, ${b})`;else if (type === BlendModes['lighten']) return `sc_lighten(${a}, ${b})`;else if (type === BlendModes['darken']) return `sc_darken(${a}, ${b})`;else if (type === BlendModes['divide']) return `sc_divide(${a}, ${b})`;else if (type === BlendModes['overlay']) return `sc_overlay(${a}, ${b})`;else if (type === BlendModes['screen']) return `sc_screen(${a}, ${b})`;else if (type === BlendModes['softlight']) return `sc_softLight(${a}, ${b})`;\n  }\n\n  getVertexVariables() {\n    return '';\n  }\n\n  getVertexBody(e) {\n    return '';\n  }\n\n}\n\nclass Base$1 extends Abstract {\n  constructor(props) {\n    super();\n    this.name = 'Base';\n    this.mode = 'normal';\n    this.uuid = Abstract.genID();\n    const {\n      color,\n      alpha,\n      mode\n    } = props || {};\n    this.uniforms = {\n      [`u_${this.uuid}_color`]: {\n        value: new Color(color != null ? color : '#ffffff')\n      },\n      [`u_${this.uuid}_alpha`]: {\n        value: alpha != null ? alpha : 1\n      }\n    };\n    this.mode = BlendModes[mode || 'normal'];\n  }\n\n  getFragmentVariables() {\n    return `    \n    // SC: Base layer uniforms **********\n    uniform float u_${this.uuid}_alpha;\n    uniform vec3 u_${this.uuid}_color;\n    // ************************************\n`;\n  }\n\n  getFragmentBody(e) {\n    return `    \n      // SC: Base layer frag-shader-code ***************************************************\n      ${e} = ${this.getBlendMode(BlendModes[this.mode], e, `vec4(u_${this.uuid}_color, u_${this.uuid}_alpha)`)};\n      // *************************************************************************************\n  `;\n  }\n\n  set color(v) {\n    this.uniforms[`u_${this.uuid}_color`].value = new Color(v);\n  }\n\n  get color() {\n    return this.uniforms[`u_${this.uuid}_color`].value;\n  }\n\n  set alpha(v) {\n    this.uniforms[`u_${this.uuid}_alpha`].value = v;\n  }\n\n  get alpha() {\n    return this.uniforms[`u_${this.uuid}_alpha`].value;\n  }\n\n}\n\nclass Depth$1 extends Abstract {\n  constructor(props) {\n    super();\n    this.name = 'Depth';\n    this.mode = 'normal';\n    this.uuid = Abstract.genID();\n    const {\n      alpha,\n      mode,\n      colorA,\n      colorB,\n      near,\n      far,\n      origin,\n      isVector\n    } = props || {};\n    this.uniforms = {\n      [`u_${this.uuid}_alpha`]: {\n        value: alpha != null ? alpha : 1\n      },\n      [`u_${this.uuid}_near`]: {\n        value: near != null ? near : 700\n      },\n      [`u_${this.uuid}_far`]: {\n        value: far != null ? far : 1e7\n      },\n      [`u_${this.uuid}_origin`]: {\n        value: origin != null ? origin : new Vector3(0, 0, 0)\n      },\n      [`u_${this.uuid}_colorA`]: {\n        value: new Color(colorA != null ? colorA : '#ffffff')\n      },\n      [`u_${this.uuid}_colorB`]: {\n        value: new Color(colorB != null ? colorB : '#ffffff')\n      },\n      [`u_${this.uuid}_isVector`]: {\n        value: isVector != null ? isVector : true\n      }\n    };\n    this.mode = BlendModes[mode || 'normal'];\n  }\n\n  getVertexVariables() {\n    return (\n      /* glsl */\n      `\n    varying vec3 v_${this.uuid}_worldPosition;\n    `\n    );\n  }\n\n  getVertexBody(e) {\n    return (\n      /* glsl */\n      `\n    v_${this.uuid}_worldPosition = vec3(vec4(position, 1.0) * modelMatrix);\n    `\n    );\n  }\n\n  getFragmentVariables() {\n    return (\n      /* glsl */\n      `    \n    // SC: Fresnel layer variables **********\n    uniform float u_${this.uuid}_alpha;\n    uniform float u_${this.uuid}_near;\n    uniform float u_${this.uuid}_far;\n    uniform float u_${this.uuid}_isVector;\n    uniform vec3 u_${this.uuid}_origin;\n    uniform vec3 u_${this.uuid}_colorA;\n    uniform vec3 u_${this.uuid}_colorB;\n\n    varying vec3 v_${this.uuid}_worldPosition;\n    // ************************************\n`\n    );\n  }\n\n  getFragmentBody(e) {\n    return (\n      /* glsl */\n      `    \n      // SC: Depth layer frag-shader-code ***************************************************\n     \n      vec3 f_${this.uuid}_base = ( u_${this.uuid}_isVector > 0.5 ) ?  u_${this.uuid}_origin : cameraPosition;\n      float f_${this.uuid}_dist = length( v_${this.uuid}_worldPosition.xyz - f_${this.uuid}_base );\n      float f_${this.uuid}_dep = ( f_${this.uuid}_dist - u_${this.uuid}_near ) / ( u_${this.uuid}_far - u_${this.uuid}_near );\n\n      vec3 f_${this.uuid}_depth =  mix( u_${this.uuid}_colorB, u_${this.uuid}_colorA, 1.0 - clamp( f_${this.uuid}_dep, 0., 1. ) );\n\n      ${e} = ${this.getBlendMode(BlendModes[this.mode], e, `vec4(f_${this.uuid}_depth, u_${this.uuid}_alpha)`)};\n      // *************************************************************************************\n  `\n    );\n  }\n\n  set alpha(v) {\n    this.uniforms[`u_${this.uuid}_alpha`].value = v;\n  }\n\n  get alpha() {\n    return this.uniforms[`u_${this.uuid}_alpha`].value;\n  }\n\n  set near(v) {\n    this.uniforms[`u_${this.uuid}_near`].value = v;\n  }\n\n  get near() {\n    return this.uniforms[`u_${this.uuid}_near`].value;\n  }\n\n  set far(v) {\n    this.uniforms[`u_${this.uuid}_far`].value = v;\n  }\n\n  get far() {\n    return this.uniforms[`u_${this.uuid}_far`].value;\n  }\n\n  set origin(v) {\n    this.uniforms[`u_${this.uuid}_origin`].value = v;\n  }\n\n  get origin() {\n    return this.uniforms[`u_${this.uuid}_origin`].value;\n  }\n\n  set colorA(v) {\n    this.uniforms[`u_${this.uuid}_colorA`].value = new Color(v);\n  }\n\n  get colorA() {\n    return this.uniforms[`u_${this.uuid}_colorA`].value;\n  }\n\n  set colorB(v) {\n    this.uniforms[`u_${this.uuid}_colorB`].value = new Color(v);\n  }\n\n  get colorB() {\n    return this.uniforms[`u_${this.uuid}_colorB`].value;\n  }\n\n  set isVector(v) {\n    this.uniforms[`u_${this.uuid}_isVector`].value = v;\n  }\n\n  get isVector() {\n    return this.uniforms[`u_${this.uuid}_isVector`].value;\n  }\n\n}\n\nclass Fresnel$1 extends Abstract {\n  constructor(props) {\n    super();\n    this.name = 'Fresnel';\n    this.mode = 'normal';\n    this.uuid = Abstract.genID();\n    const {\n      alpha,\n      mode,\n      color,\n      bias,\n      intensity,\n      power\n    } = props || {};\n    this.uniforms = {\n      [`u_${this.uuid}_alpha`]: {\n        value: alpha != null ? alpha : 1\n      },\n      [`u_${this.uuid}_color`]: {\n        value: new Color(color != null ? color : '#ffffff')\n      },\n      [`u_${this.uuid}_bias`]: {\n        value: bias != null ? bias : 0\n      },\n      [`u_${this.uuid}_intensity`]: {\n        value: intensity != null ? intensity : 1\n      },\n      [`u_${this.uuid}_power`]: {\n        value: power != null ? power : 2\n      }\n    };\n    this.mode = BlendModes[mode || 'normal'];\n  }\n\n  getVertexVariables() {\n    return (\n      /* glsl */\n      `\n    varying vec3 v_${this.uuid}_worldPosition;\n    varying vec3 v_${this.uuid}_worldNormal;\n    `\n    );\n  }\n\n  getVertexBody(e) {\n    return (\n      /* glsl */\n      `\n    v_${this.uuid}_worldPosition = normalize(vec3(modelViewMatrix * vec4(position, 1.0)).xyz);\n    v_${this.uuid}_worldNormal = normalize(normalMatrix * normal);\n    `\n    );\n  }\n\n  getFragmentVariables() {\n    return (\n      /* glsl */\n      `    \n    // SC: Fresnel layer variables **********\n    uniform float u_${this.uuid}_alpha;\n    uniform vec3 u_${this.uuid}_color;\n    uniform float u_${this.uuid}_bias;\n    uniform float u_${this.uuid}_intensity;\n    uniform float u_${this.uuid}_power;\n    uniform float u_${this.uuid}_factor;\n\n    varying vec3 v_${this.uuid}_worldPosition;\n    varying vec3 v_${this.uuid}_worldNormal;\n    // ************************************\n`\n    );\n  }\n\n  getFragmentBody(e) {\n    return (\n      /* glsl */\n      `    \n      // SC: Fresnel layer frag-shader-code ***************************************************\n      float f_${this.uuid}_a = ( 1.0 - -min(dot(v_${this.uuid}_worldPosition, normalize(v_${this.uuid}_worldNormal) ), 0.0) );\n      float f_${this.uuid}_fresnel = u_${this.uuid}_bias + (u_${this.uuid}_intensity * pow(f_${this.uuid}_a, u_${this.uuid}_power));\n\n      ${e} = ${this.getBlendMode(BlendModes[this.mode], e, `vec4(u_${this.uuid}_color * f_${this.uuid}_fresnel, u_${this.uuid}_alpha)`)};\n      // *************************************************************************************\n  `\n    );\n  }\n\n  set alpha(v) {\n    this.uniforms[`u_${this.uuid}_alpha`].value = v;\n  }\n\n  get alpha() {\n    return this.uniforms[`u_${this.uuid}_alpha`].value;\n  }\n\n  set color(v) {\n    this.uniforms[`u_${this.uuid}_color`].value = new Color(v);\n  }\n\n  get color() {\n    return this.uniforms[`u_${this.uuid}_color`].value;\n  }\n\n  set bias(v) {\n    this.uniforms[`u_${this.uuid}_bias`].value = v;\n  }\n\n  get bias() {\n    return this.uniforms[`u_${this.uuid}_bias`].value;\n  }\n\n  set intensity(v) {\n    this.uniforms[`u_${this.uuid}_intensity`].value = v;\n  }\n\n  get intensity() {\n    return this.uniforms[`u_${this.uuid}_intensity`].value;\n  }\n\n  set power(v) {\n    this.uniforms[`u_${this.uuid}_power`].value = v;\n  }\n\n  get power() {\n    return this.uniforms[`u_${this.uuid}_power`].value;\n  }\n\n}\n\nclass Noise$3 extends Abstract {\n  constructor(props) {\n    super();\n    this.name = 'Noise';\n    this.mode = 'normal';\n    this.uuid = Abstract.genID();\n    const {\n      alpha,\n      mode,\n      scale,\n      color\n    } = props || {};\n    this.uniforms = {\n      [`u_${this.uuid}_alpha`]: {\n        value: alpha != null ? alpha : 1\n      },\n      [`u_${this.uuid}_scale`]: {\n        value: scale != null ? scale : 1\n      },\n      [`u_${this.uuid}_color`]: {\n        value: new Color(color != null ? color : '#ffffff')\n      }\n    };\n    this.mode = BlendModes[mode || 'normal'];\n  }\n\n  getVertexVariables() {\n    return (\n      /* glsl */\n      `\n    varying vec2 v_${this.uuid}_uv;\n    `\n    );\n  }\n\n  getVertexBody(e) {\n    return (\n      /* glsl */\n      `\n    v_${this.uuid}_uv = uv;\n    `\n    );\n  }\n\n  getFragmentVariables() {\n    return (\n      /* glsl */\n      `    \n    // SC: Fresnel layer variables **********\n    uniform float u_${this.uuid}_alpha;\n    uniform vec3 u_${this.uuid}_color;\n    uniform float u_${this.uuid}_scale;\n\n    varying vec2 v_${this.uuid}_uv;\n    // ************************************\n`\n    );\n  }\n\n  getFragmentBody(e) {\n    return (\n      /* glsl */\n      `    \n      // SC: Fresnel layer frag-shader-code ***************************************************\n      float f_${this.uuid}_noise = sc_rand(v_${this.uuid}_uv * u_${this.uuid}_scale);\n\n      ${e} = ${this.getBlendMode(BlendModes[this.mode], e, `vec4(u_${this.uuid}_color * f_${this.uuid}_noise, u_${this.uuid}_alpha)`)};\n      // *************************************************************************************\n  `\n    );\n  }\n\n  set alpha(v) {\n    this.uniforms[`u_${this.uuid}_alpha`].value = v;\n  }\n\n  get alpha() {\n    return this.uniforms[`u_${this.uuid}_alpha`].value;\n  }\n\n  set color(v) {\n    this.uniforms[`u_${this.uuid}_color`].value = new Color(v);\n  }\n\n  get color() {\n    return this.uniforms[`u_${this.uuid}_color`].value;\n  }\n\n  set scale(v) {\n    this.uniforms[`u_${this.uuid}_scale`].value = v;\n  }\n\n  get scale() {\n    return this.uniforms[`u_${this.uuid}_scale`].value;\n  }\n\n}\n\nclass Noise$2 extends Abstract {\n  constructor(props) {\n    super();\n    this.name = 'Normals';\n    this.mode = 'normal';\n    this.uuid = Abstract.genID();\n    const {\n      alpha,\n      mode,\n      direction\n    } = props || {};\n    this.uniforms = {\n      [`u_${this.uuid}_alpha`]: {\n        value: alpha != null ? alpha : 1\n      },\n      [`u_${this.uuid}_direction`]: {\n        value: direction\n      }\n    };\n    this.mode = BlendModes[mode || 'normal'];\n  }\n\n  getVertexVariables() {\n    return (\n      /* glsl */\n      `\n    varying vec3 v_${this.uuid}_normals;\n    `\n    );\n  }\n\n  getVertexBody(e) {\n    return (\n      /* glsl */\n      `\n    v_${this.uuid}_normals = normal;\n    `\n    );\n  }\n\n  getFragmentVariables() {\n    return (\n      /* glsl */\n      `    \n    // SC: Fresnel layer variables **********\n    uniform float u_${this.uuid}_alpha;\n    uniform vec3 u_${this.uuid}_color;\n    uniform vec3 u_${this.uuid}_direction;\n\n    varying vec3 v_${this.uuid}_normals;\n    // ************************************\n`\n    );\n  }\n\n  getFragmentBody(e) {\n    return (\n      /* glsl */\n      `    \n      // SC: Fresnel layer frag-shader-code ***************************************************\n      vec3 f_${this.uuid}_normalColor = vec3(1.);\n      f_${this.uuid}_normalColor.x = v_${this.uuid}_normals.x * u_${this.uuid}_direction.x;\n      f_${this.uuid}_normalColor.y = v_${this.uuid}_normals.y * u_${this.uuid}_direction.y;\n      f_${this.uuid}_normalColor.z = v_${this.uuid}_normals.z * u_${this.uuid}_direction.z;\n\n      ${e} = ${this.getBlendMode(BlendModes[this.mode], e, `vec4(f_${this.uuid}_normalColor, u_${this.uuid}_alpha)`)};\n      // *************************************************************************************\n  `\n    );\n  }\n\n  set alpha(v) {\n    this.uniforms[`u_${this.uuid}_alpha`].value = v;\n  }\n\n  get alpha() {\n    return this.uniforms[`u_${this.uuid}_alpha`].value;\n  }\n\n  set color(v) {\n    this.uniforms[`u_${this.uuid}_color`].value = new Color(v);\n  }\n\n  get color() {\n    return this.uniforms[`u_${this.uuid}_color`].value;\n  }\n\n  set direction(v) {\n    this.uniforms[`u_${this.uuid}_direction`].value = v;\n  }\n\n  get direction() {\n    return this.uniforms[`u_${this.uuid}_direction`].value;\n  }\n\n}\n\nclass Noise$1 extends Abstract {\n  constructor(props) {\n    super();\n    this.name = 'Texture';\n    this.mode = 'texture';\n    this.uuid = Abstract.genID();\n    const {\n      alpha,\n      mode,\n      map\n    } = props || {};\n    this.uniforms = {\n      [`u_${this.uuid}_alpha`]: {\n        value: alpha != null ? alpha : 1\n      },\n      [`u_${this.uuid}_map`]: {\n        value: map\n      }\n    };\n    this.mode = BlendModes[mode || 'normal'];\n  }\n\n  getVertexVariables() {\n    return (\n      /* glsl */\n      `\n    varying vec2 v_${this.uuid}_uv;\n    `\n    );\n  }\n\n  getVertexBody(e) {\n    return (\n      /* glsl */\n      `\n    v_${this.uuid}_uv = uv;\n    `\n    );\n  }\n\n  getFragmentVariables() {\n    return (\n      /* glsl */\n      `    \n    // SC: Fresnel layer variables **********\n    uniform float u_${this.uuid}_alpha;\n    uniform sampler2D u_${this.uuid}_map;\n\n    varying vec2 v_${this.uuid}_uv;\n    // ************************************\n`\n    );\n  }\n\n  getFragmentBody(e) {\n    return (\n      /* glsl */\n      `    \n      // SC: Fresnel layer frag-shader-code ***************************************************\n      vec4 f_${this.uuid}_texture = texture2D(u_${this.uuid}_map, v_${this.uuid}_uv);\n\n      ${e} = ${this.getBlendMode(BlendModes[this.mode], e, `vec4(f_${this.uuid}_texture.xyz, f_${this.uuid}_texture.a * u_${this.uuid}_alpha)`)};\n      // *************************************************************************************\n  `\n    );\n  }\n\n  set alpha(v) {\n    this.uniforms[`u_${this.uuid}_alpha`].value = v;\n  }\n\n  get alpha() {\n    return this.uniforms[`u_${this.uuid}_alpha`].value;\n  }\n\n  set map(v) {\n    this.uniforms[`u_${this.uuid}_map`].value = v;\n  }\n\n  get map() {\n    return this.uniforms[`u_${this.uuid}_map`].value;\n  }\n\n}\n\nvar HelperChunk = /* glsl */\n`\n/**\n * Converts a number from one range to another.\n *\n * @name sc_map\n * @function\n * @param {} value      Value to map\n * @param {float} min1  Minimum for current range\n * @param {float} max1  Maximum for current range\n * @param {float} min2  Minimum for wanted range\n * @param {float} max2  Maximum for wanted range\n * @return {float} Mapped Value\n *\n * @example\n * float n = sc_map(-0.2, -1.0, 1.0, 0.0, 1.0);\n * // n = 0.4\n */\nfloat sc_map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n`;\n\nvar BlendModesChunk = /* glsl */\n`\n// SC: Blend modes definitions **********\n\nfloat sc_softLight(float f, float b) {\n  return (f < 0.5)\n             ? b - (1.0 - 2.0 * f) * b * (1.0 - b)\n             : (b < 0.25)\n                   ? b + (2.0 * f - 1.0) * b * ((16.0 * b - 12.0) * b + 3.0)\n                   : b + (2.0 * f - 1.0) * (sqrt(b) - b);\n}\n\nvec4 sc_softLight(vec4 b, vec4 f) {\n  vec4 result;\n  result.x = sc_softLight(f.x, b.x);\n  result.y = sc_softLight(f.y, b.y);\n  result.z = sc_softLight(f.z, b.z);\n  result.a = sc_softLight(f.a, b.a);\n  \n  return result;\n}\n\nvec4 sc_screen(vec4 f, vec4 b) {\n  vec4 result;\n\n  result = 1.0 - (1.0 - f) * (1.0 - b);\n  result = mix(f, result, b.a);\n\n  return result;\n}\n\nfloat sc_overlay(float f, float b) {\n  return (b < 0.5) ? 2.0 * f * b : 1.0 - 2.0 * (1.0 - f) * (1.0 - b);\n}\n\nvec4 sc_overlay(vec4 b, vec4 f) {\n  vec4 result;\n  result.x = sc_overlay(f.x, b.x);\n  result.y = sc_overlay(f.y, b.y);\n  result.z = sc_overlay(f.z, b.z);\n  result.a = sc_overlay(f.a, b.a);\n\n\n  return result;\n}\n\nvec4 sc_divide(vec4 f, vec4 b) {\n  vec4 result = vec4(0.0);\n  result = b / f;\n  return result;\n}\n\nvec4 sc_switch(vec4 f, vec4 b, float o) {\n  vec4 result = vec4(0.0);\n  result = max((f * o), (b * (1.0 - o)));\n  return result;\n}\n\nvec4 sc_darken(vec4 f, vec4 b) {\n  vec4 result = vec4(0.0);\n  result = mix(f, min(f, b), b.a);\n  return result;\n}\n\nvec4 sc_lighten(vec4 f, vec4 b) {\n  vec4 result = vec4(0.0);\n  result = mix(f, max(f, b), b.a);\n  return result;\n}\n\nfloat sc_addSub(float f, float b) {\n  return f > 0.5 ? f + b : b - f;\n}\nvec4 sc_addSub(vec4 f, vec4 b) {\n  vec4 result = vec4(0.0);\n\n  result.r = sc_addSub(f.r, b.r * b.a);\n  result.g = sc_addSub(f.g, b.g * b.a);\n  result.b = sc_addSub(f.b, b.b* b.a ) ;\n  result.a = sc_addSub(f.a, b.a);\n\n  return result;\n}\n\nvec4 sc_multiply(vec4 f, vec4 b) {\n  vec4 result = vec4(0.0);\n\n  result = mix(f, b * f, b.a);\n  result.a = f.a + b.a * (1.0 - f.a);\n\n  return result;\n}\n\nvec4 sc_subtract(vec4 f, vec4 b) {\n  vec4 result = vec4(0.0);\n\n  result = f - b * b.a;\n  result.a = f.a + b.a * (1.0 - f.a);\n\n  return result;\n}\n\nvec4 sc_add(vec4 f, vec4 b) {\n  vec4 result = vec4(0.0);\n\n  result = f + b * (b.a);\n  result.a = f.a + b.a * (1.0 - f.a);\n\n  return result;\n}\n\nvec4 sc_copy(vec4 b, vec4 f) {\n  vec4 result = vec4(0.0);\n\n  result.a = f.a + b.a * (1.0 - f.a);\n  result.rgb = ((f.rgb * f.a) + (b.rgb * b.a) * (1.0 - f.a));\n\n  return result;\n}\n\n`; // ************************************\n\nvar RandChunk = /* glsl */\n`\n\n/**\n * Normalized a value from the range [-1, 1] to the range [0,1].\n *\n * @name sc_normalize\n * @function\n * @param {float} v Value to normalize\n * @return {float} Normalized Value\n *\n * @example\n * float n = sc_normalize(-0.2);\n * // n = 0.4\n */\nfloat sc_normalize(float v) { return sc_map(v, -1.0, 1.0, 0.0, 1.0); }\n\n/**\n * Generates a random 2D Vector.\n *\n * @name sc_rand2\n * @function\n * @param {vec2} p Vector to hash to generate the random numbers from.\n * @return {vec2} Random vector.\n *\n * @example\n * vec2 n = sc_rand2(vec2(1.0, -4.2));\n */\nvec2 sc_rand2(vec2 p) {\n  return fract(\n      sin(vec2(dot(p, vec2(127.1, 311.7)), dot(p, vec2(269.5, 183.3)))) *\n      43758.5453);\n}\n\n/**\n * Generates a random 3D Vector.\n *\n * @name sc_rand3\n * @function\n * @param {vec3} p Vector to hash to generate the random numbers from.\n * @return {vec3} Random vector.\n *\n * @example\n * vec3 n = sc_rand3(vec3(1.0, -4.2, 0.2));\n */\nvec3 sc_rand3(vec3 p) { return mod(((p * 34.0) + 1.0) * p, 289.0); }\n\n/**\n * Generates a random 4D Vector.\n *\n * @name sc_rand4\n * @function\n * @param {vec4} p Vector to hash to generate the random numbers from.\n * @return {vec4} Random vector.\n *\n * @example\n * vec4 n = sc_rand4(vec4(1.0, -4.2, 0.2, 2.2));\n */\nvec4 sc_rand4(vec4 p) { return mod(((p * 34.0) + 1.0) * p, 289.0); }\n\n/**\n * Generates a random number.\n *\n * @name sc_rand\n * @function\n * @param {float} n Value to hash to generate the number from.\n * @return {float} Random number.\n *\n * @example\n * float n = sc_rand(2.5);\n */\nfloat sc_rand(float n) { return fract(sin(n) * 1e4); }\n\n/**\n * Generates a random number.\n *\n * @name sc_rand\n * @function\n * @param {vec2} p Value to hash to generate the number from.\n * @return {float} Random number.\n *\n * @example\n * float n = sc_rand(vec2(2.5, -1.8));\n */\nfloat sc_rand(vec2 p) {\n  return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) *\n               (0.1 + abs(sin(p.y * 13.0 + p.x))));\n}\n`;\n\nclass LayerMaterial$1 extends ShaderMaterial {\n  static constructShader({\n    layers,\n    ...props\n  } = {}) {\n    const uniforms = {};\n    const variables = {\n      vert: '',\n      frag: ''\n    };\n    const body = {\n      vert: '',\n      frag: ''\n    };\n    layers == null ? void 0 : layers.forEach(layer => {\n      variables.frag += layer.getFragmentVariables() + ' \\n';\n      variables.vert += layer.getVertexVariables() + ' \\n';\n      Object.keys(layer.uniforms).forEach(key => uniforms[key] = layer.uniforms[key]);\n      body.frag += layer.getFragmentBody('sc_finalColor') + ' \\n';\n      body.vert += layer.getVertexBody('') + ' \\n';\n    });\n    return {\n      uniforms,\n      vertexShader: `\n    ${variables.vert}\n    void main() {\n      ${body.vert}\n      vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n      gl_Position = projectionMatrix * modelViewPosition;\n    }\n    `,\n      fragmentShader: `\n    ${HelperChunk}\n    ${RandChunk}\n    ${BlendModesChunk}\n    ${variables.frag}\n    void main() {\n      vec4 sc_finalColor = vec4(vec3(1.), 1.);\n      ${body.frag}\n      gl_FragColor = sc_finalColor;\n      #include <tonemapping_fragment>\n      #include <encodings_fragment>\n      #include <fog_fragment>\n      #include <premultiplied_alpha_fragment>\n      #include <dithering_fragment>\n    }\n    `,\n      ...props\n    };\n  }\n\n  constructor(props) {\n    super(LayerMaterial$1.constructShader(props));\n    this.uniformsNeedUpdate = true;\n    this.needsUpdate = true;\n  }\n\n}\n\nextend({\n  LayerMaterial: LayerMaterial$1,\n  Base_: Base$1,\n  Depth_: Depth$1,\n  Fresnel_: Fresnel$1,\n  Noise_: Noise$3,\n  Normals_: Noise$2,\n  Texture_: Noise$1\n});\nconst LayerMaterial = /*#__PURE__*/React.forwardRef(({\n  children,\n  ...props\n}, forwardRef) => {\n  const ref = React.useRef(null);\n  React.useLayoutEffect(() => {\n    Object.assign(ref.current, LayerMaterial$1.constructShader({\n      layers: ref.current.__r3f.objects\n    }));\n    ref.current.uniformsNeedUpdate = true;\n    ref.current.needsUpdate = true;\n  }, [children]);\n  return /*#__PURE__*/React.createElement(\"layerMaterial\", _extends({\n    ref: mergeRefs([ref, forwardRef])\n  }, props), children);\n});\nconst Base = /*#__PURE__*/React.forwardRef((props, forwardRef) => {\n  return /*#__PURE__*/React.createElement(\"base_\", _extends({\n    ref: forwardRef\n  }, props));\n});\nconst Depth = /*#__PURE__*/React.forwardRef((props, forwardRef) => {\n  return /*#__PURE__*/React.createElement(\"depth_\", _extends({\n    ref: forwardRef\n  }, props));\n});\nconst Fresnel = /*#__PURE__*/React.forwardRef((props, forwardRef) => {\n  return /*#__PURE__*/React.createElement(\"fresnel_\", _extends({\n    ref: forwardRef\n  }, props));\n});\nconst Noise = /*#__PURE__*/React.forwardRef((props, forwardRef) => {\n  return /*#__PURE__*/React.createElement(\"noise_\", _extends({\n    ref: forwardRef\n  }, props));\n});\nconst Normals = /*#__PURE__*/React.forwardRef((props, forwardRef) => {\n  return /*#__PURE__*/React.createElement(\"normals_\", _extends({\n    ref: forwardRef\n  }, props));\n});\nconst Texture = /*#__PURE__*/React.forwardRef((props, forwardRef) => {\n  return /*#__PURE__*/React.createElement(\"texture_\", _extends({\n    ref: forwardRef\n  }, props));\n});\n\nexport { Base, Depth, Fresnel, LayerMaterial, Noise, Normals, Texture };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}