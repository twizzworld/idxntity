import * as React from 'react';
import { Node } from '@react-three/fiber';
import * as LAYERS from './vanilla';
declare global {
    namespace JSX {
        interface IntrinsicElements {
            layerMaterial: Node<LAYERS.LayerMaterial, typeof LAYERS.LayerMaterial>;
            base_: Node<LAYERS.Base, typeof LAYERS.Base>;
            depth_: Node<LAYERS.Depth, typeof LAYERS.Depth>;
            fresnel_: Node<LAYERS.Fresnel, typeof LAYERS.Fresnel>;
            noise_: Node<LAYERS.Noise, typeof LAYERS.Noise>;
            normals_: Node<LAYERS.Normals, typeof LAYERS.Normals>;
            texture_: Node<LAYERS.Normals, typeof LAYERS.Texture>;
        }
    }
}
export declare type LayerMaterialProps = JSX.IntrinsicElements['layerMaterial'] & {
    children?: React.ReactNode;
};
declare const LayerMaterial: React.ForwardRefExoticComponent<Pick<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<LAYERS.LayerMaterial>, import("@react-three/fiber").NodeProps<LAYERS.LayerMaterial, typeof LAYERS.LayerMaterial>>>, "attach" | "attachArray" | "attachObject" | "attachFns" | "args" | "children" | "key" | "onUpdate" | keyof LAYERS.LayerMaterial> & React.RefAttributes<unknown>>;
declare const Base: React.ForwardRefExoticComponent<Pick<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<LAYERS.Base>, import("@react-three/fiber").NodeProps<LAYERS.Base, typeof LAYERS.Base>>>, "attach" | "attachArray" | "attachObject" | "attachFns" | "args" | "children" | "key" | "onUpdate" | keyof LAYERS.Base> & React.RefAttributes<unknown>>;
declare const Depth: React.ForwardRefExoticComponent<Pick<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<LAYERS.Depth>, import("@react-three/fiber").NodeProps<LAYERS.Depth, typeof LAYERS.Depth>>>, "attach" | "attachArray" | "attachObject" | "attachFns" | "args" | "children" | "key" | "onUpdate" | keyof LAYERS.Depth> & React.RefAttributes<unknown>>;
declare const Fresnel: React.ForwardRefExoticComponent<Pick<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<LAYERS.Fresnel>, import("@react-three/fiber").NodeProps<LAYERS.Fresnel, typeof LAYERS.Fresnel>>>, "attach" | "attachArray" | "attachObject" | "attachFns" | "args" | "children" | "key" | "onUpdate" | keyof LAYERS.Fresnel> & React.RefAttributes<unknown>>;
declare const Noise: React.ForwardRefExoticComponent<Pick<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<LAYERS.Noise>, import("@react-three/fiber").NodeProps<LAYERS.Noise, typeof LAYERS.Noise>>>, "attach" | "attachArray" | "attachObject" | "attachFns" | "args" | "children" | "key" | "onUpdate" | keyof LAYERS.Noise> & React.RefAttributes<unknown>>;
declare const Normals: React.ForwardRefExoticComponent<Pick<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<LAYERS.Normals>, import("@react-three/fiber").NodeProps<LAYERS.Normals, typeof LAYERS.Normals>>>, "attach" | "attachArray" | "attachObject" | "attachFns" | "args" | "children" | "key" | "onUpdate" | keyof LAYERS.Normals> & React.RefAttributes<unknown>>;
declare const Texture: React.ForwardRefExoticComponent<Pick<import("@react-three/fiber").ExtendedColors<import("@react-three/fiber").Overwrite<Partial<LAYERS.Normals>, import("@react-three/fiber").NodeProps<LAYERS.Normals, typeof LAYERS.Texture>>>, "attach" | "attachArray" | "attachObject" | "attachFns" | "args" | "children" | "key" | "onUpdate" | keyof LAYERS.Normals> & React.RefAttributes<unknown>>;
export { LayerMaterial, Base, Depth, Fresnel, Noise, Normals, Texture };
